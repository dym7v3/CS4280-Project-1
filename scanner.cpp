//
// Created by Dennis Moyseyev on 10/18/2017.
//
#include <string>
#include <iostream>
#include <map>
#include "./token.h"
#include "./testscanner.h"

using namespace std;

enum STATE
{
    INITIAL=0, //S0 first state
    FINAL_STATE=2000,
    END_OF_FILE_COLUMN=0,
    DIGIT_COLUMN=1,
    LETTER_COLUMN=2,
    WHITESPACE_COLUMN=3,
    EQAULS_COLUMN=4,
    LESS_THAN_COLUMN=5,
    GREATER_THAN_COLUMN=6,
    NOT_COLUMN=7,
    COLON_COLUMN=8,
    PLUS_COLUMN=9,
    MINUS_COLUMN=10,
    MUlTIPLY_COLUMN=11,
    DIVIDE_COLUMN=12,
    AMPERSAND_COLUMN=13,
    PERCENT_COLUMN=14,
    PERIOD_COLUMN=15,
    LEFTBRACKET_COLUMN=16,
    RIGHTBRACKET_COLUMN=17,
    LEFTBRACE_COLUMN=18,
    RIGHTBRACE_COLUMN=19,
    COMMA_COLUMN=20,
    LEFT_PARENTHESIS_COLUMN=21,
    RIGHT_PARENTHESIS_COLUMN=22,
    SEMICOLON_COLUMN=23,

};

map <char, STATE> Different_States= {
        {'=' , EQAULS_COLUMN},
        {'<' , LESS_THAN_COLUMN},
        {'>' , GREATER_THAN_COLUMN},
        {'!' , NOT_COLUMN},
        {':' , COLON_COLUMN},
        {'+' , PLUS_COLUMN},
        {'-' , MINUS_COLUMN},
        {'*' , MUlTIPLY_COLUMN},
        {'/' , DIVIDE_COLUMN},
        {'&' , AMPERSAND_COLUMN},
        {'%' , PERCENT_COLUMN},
        {'.' , PERIOD_COLUMN},
        {'[' , LEFTBRACKET_COLUMN},
        {']' , RIGHTBRACKET_COLUMN},
        {'{' , LEFTBRACE_COLUMN},
        {'}' , RIGHTBRACE_COLUMN},
        {',' , COMMA_COLUMN},
        {'(' , LEFT_PARENTHESIS_COLUMN},
        {')' , RIGHT_PARENTHESIS_COLUMN},
        {';' , SEMICOLON_COLUMN}
};

int table[27][24] = {
        { 2000 , 2 , 1 , 0 , 3 , 5 , 7 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 } ,
        { 2001 , 1 , 1 , 2001 , 2001 , 2001 , 2001 , 2001 , 2001 , 2001 , 2001 , 2001 , 2001 , 2001 , 2001 , 2001 , 2001 , 2001 , 2001 , 2001 , 2001 , 2001 , 2001 , 2001 } ,
        { 2002 , 2 , 2002 , 2002 , 2002 , 2002 , 2002 , 2002 , 2002 , 2002 , 2002 , 2002 , 2002 , 2002 , 2002 , 2002 , 2002 , 2002 , 2002 , 2002 , 2002 , 2002 , 2002 , 2002 } ,
        { 2003 , 2003 , 2003 , 2003 , 4 , 2003 , 2003 , 2003 , 2003 , 2003 , 2003 , 2003 , 2003 , 2003 , 2003 , 2003 , 2003 , 2003 , 2003 , 2003 , 2003 , 2003 , 2003 , 2003 } ,
        { 2004 , 2004 , 2004 , 2004 , 2004 , 2004 , 2004 , 2004 , 2004 , 2004 , 2004 , 2004 , 2004 , 2004 , 2004 , 2004 , 2004 , 2004 , 2004, 2004 , 2004 , 2004 , 2004 , 2004 } ,
        { 2005 , 2005 , 2005 , 2005 , 6 , 2005 , 2005, 2005, 2005 , 2005 , 2005, 2005 , 2005 , 2005 , 2005, 2005 , 2005 , 2005 , 2005 , 2005 , 2005 , 2005 , 2005 , 2005 , } ,
        { 2006 , 2006 , 2006 , 2006 , 2006 , 2006 , 2006 , 2006 , 2006 , 2006 , 2006 , 2006 , 2006 , 2006 , 2006 , 2006 , 2006 , 2006 , 2006 , 2006 , 2006 , 2006 , 2006 , 2006 } ,
        { 2007 , 2007 , 2007 , 2007 , 8 , 2007 , 2007 , 2007 , 2007 , 2007 , 2007 , 2007 , 2007 , 2007 , 2007 , 2007 , 2007 , 2007 , 2007 , 2007 , 2007 , 2007 , 2007 , 2007 } ,
        { 2008 , 2008 , 2008 , 2008, 2008 , 2008 , 2008 , 2008, 2008 , 2008 , 2008 , 2008, 2008 , 2008 , 2008 , 2008, 2008 , 2008 , 2008 , 2008, 2008 , 2008 , 2008 , 2008  } ,
        { -1 , -1 , -1 , -1 , 10 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 },
        { 2009 , 2009 , 2009 , 2009 , 2009 , 2009 , 2009 , 2009 , 2009 , 2009 , 2009 , 2009 , 2009 , 2009 , 2009 , 2009 , 2009 , 2009 , 2009 , 2009 , 2009 , 2009 , 2009 , 2009 } ,
        { 2010 , 2010 , 2010 , 2010 , 2010 , 2010 , 2010 , 2010 , 2010 , 2010 , 2010 , 2010 , 2010 , 2010 , 2010 , 2010 , 2010 , 2010 , 2010 , 2010 , 2010 , 2010 , 2010 , 2010 } ,
        { 2011 , 2011 , 2011 , 2011 , 2011 , 2011 , 2011 , 2011 , 2011 , 2011 , 2011 , 2011 , 2011 , 2011 , 2011 , 2011 , 2011 , 2011 , 2011 , 2011 , 2011 , 2011 , 2011 , 2011 } ,
        { 2012 , 2012 , 2012 , 2012 , 2012 , 2012 , 2012 , 2012 , 2012 , 2012 , 2012 , 2012 , 2012 , 2012 , 2012 , 2012 , 2012 , 2012 , 2012 , 2012 , 2012 , 2012 , 2012 , 2012 } ,
        { 2013 , 2013 , 2013 , 2013 , 2013 , 2013 , 2013 , 2013 , 2013 , 2013 , 2013 , 2013 , 2013 , 2013 , 2013 , 2013 , 2013 , 2013 , 2013 , 2013 , 2013 , 2013 , 2013 , 2013 } ,
        { 2014 , 2014 , 2014 , 2014 , 2014 , 2014 , 2014 , 2014 , 2014 , 2014 , 2014 , 2014 , 2014 , 2014 , 2014 , 2014 , 2014 , 2014 , 2014 , 2014 , 2014 , 2014 , 2014 , 2014 } ,
        { 2015 , 2015 , 2015 , 2015 , 2015 , 2015 , 2015 , 2015 , 2015 , 2015 , 2015 , 2015 , 2015 , 2015 , 2015 , 2015 , 2015 , 2015 , 2015 , 2015 , 2015 , 2015 , 2015 , 2015 } ,
        { 2016 , 2016 , 2016 , 2016 , 2016 , 2016 , 2016 , 2016 , 2016 , 2016 , 2016 , 2016 , 2016 , 2016 , 2016 , 2016 , 2016 , 2016 , 2016 , 2016 , 2016 , 2016 , 2016 , 2016 } ,
        { 2017 , 2017 , 2017 , 2017 , 2017 , 2017 , 2017 , 2017 , 2017 , 2017 , 2017 , 2017 , 2017 , 2017 , 2017 , 2017 , 2017 , 2017 , 2017 , 2017 , 2017 , 2017 , 2017 , 2017 } ,
        { 2018 , 2018 , 2018 , 2018 , 2018 , 2018 , 2018 , 2018 , 2018 , 2018 , 2018 , 2018 , 2018 , 2018 , 2018 , 2018 , 2018 , 2018 , 2018 , 2018 , 2018 , 2018 , 2018 , 2018 } ,
        { 2019 , 2019 , 2019 , 2019 , 2019 , 2019 , 2019 , 2019 , 2019 , 2019 , 2019 , 2019 , 2019 , 2019 , 2019 , 2019 , 2019 , 2019 , 2019 , 2019 , 2019 , 2019 , 2019 , 2019 } ,
        { 2020 , 2020 , 2020 , 2020 , 2020 , 2020 , 2020 , 2020 , 2020 , 2020 , 2020 , 2020 , 2020 , 2020 , 2020 , 2020 , 2020 , 2020 , 2020 , 2020 , 2020 , 2020 , 2020 , 2020 } ,
        { 2021 , 2021 , 2021 , 2021 , 2021 , 2021 , 2021 , 2021 , 2021 , 2021 , 2021 , 2021 , 2021 , 2021 , 2021 , 2021 , 2021 , 2021 , 2021 , 2021 , 2021 , 2021 , 2021 , 2021 } ,
        { 2022 , 2022 , 2022 , 2022 , 2022 , 2022 , 2022 , 2022 , 2022 , 2022 , 2022 , 2022 , 2022 , 2022 , 2022 , 2022 , 2022 , 2022 , 2022 , 2022 , 2022 , 2022 , 2022 , 2022 } ,
        { 2023 , 2023 , 2023 , 2023 , 2023 , 2023 , 2023 , 2023 , 2023 , 2023 , 2023 , 2023 , 2023 , 2023 , 2023 , 2023 , 2023 , 2023 , 2023 , 2023 , 2023 , 2023 , 2023 , 2023 } ,
        { 2024 , 2024 , 2024 , 2024 , 2024 , 2024 , 2024 , 2024 , 2024 , 2024 , 2024 , 2024 , 2024 , 2024 , 2024 , 2024 , 2024 , 2024 , 2024 , 2024 , 2024 , 2024 , 2024 , 2024 } ,
        { 2025 , 2025 , 2025 , 2025 , 2025 , 2025 , 2025 , 2025 , 2025 , 2025 , 2025 , 2025 , 2025 , 2025 , 2025 , 2025 , 2025 , 2025 , 2025 , 2025 , 2025 , 2025 , 2025 , 2025 } ,

};

//Checks if the character is a letter a number or something else and returned the enum type.
STATE check(char the_char)
{
    if(isalpha(the_char))
    {
        return LETTER_COLUMN;
    }
    else if(isdigit(the_char))
    {
        return DIGIT_COLUMN;
    }
    else if(isspace(the_char))
    {
        return WHITESPACE_COLUMN;
    }
    else return the_char == EOF ? END_OF_FILE_COLUMN : Different_States[the_char];
}


//Returns a character from the string at the number in the string.
const char Get_Char(string &file_string, int char_number_in_string)
{
    if(file_string.length()<char_number_in_string || char_number_in_string<0)
    {
        cout<<"ERROR: Can't return a character that is outside the string. Program will terminate."<<endl;
        exit(1);
    }
    return file_string[char_number_in_string];
}

//This gets called by the test scanner program.
Token * Driver (char first_char)
{
    STATE state=INITIAL;
    TOKEN_ID this_token=End_Of_File;
    string value_string;
    Token *my_token= new Token(this_token, "hello", 5);

   // while(state!=FINAL_STATE)
    cout<<check(first_char)<<endl;












    return my_token;
}